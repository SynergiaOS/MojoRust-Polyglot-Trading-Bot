# =============================================================================
# üê≥ MojoRust Trading Bot - Docker Compose Configuration
# =============================================================================
#
# Purpose: Docker infrastructure configuration (database passwords, service ports, container settings)
# This file complements the main .env file which contains application configuration.
#
# Usage:
#   1. Copy this file to .env.docker:
#      cp .env.docker.example .env.docker
#
#   2. Set secure passwords (CRITICAL!):
#      nano .env.docker
#
#   3. Set proper permissions:
#      chmod 600 .env.docker
#
#   4. Docker Compose will automatically load this file:
#      docker-compose up -d
#
# Security Notes:
#   - Add .env.docker to .gitignore - NEVER commit to version control
#   - Use strong passwords (minimum 32 characters, random)
#   - Store production credentials in Infisical when possible
#   - Rotate credentials regularly (every 90 days)
#
# =============================================================================

# =============================================================================
# BUILD CONFIGURATION
# =============================================================================

# Enable Rust data consumer for Geyser streaming
ENABLE_RUST_CONSUMER=true

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# TimescaleDB database configuration
# These credentials are used by the TimescaleDB container
TIMESCALEDB_DBNAME=trading_db
TIMESCALEDB_USER=trading_user
TIMESCALEDB_PASSWORD=change_this_secure_password_in_production_minimum_32_chars

# DragonflyDB Cloud configuration
# Using DragonflyDB Cloud instead of local Redis for production
# Get your DragonflyDB Cloud URL from: https://dragonflydb.cloud
REDIS_URL=rediss://default:gv7g6u9svsf1@612ehcb9i.dragonflydb.cloud:6385

# Legacy Redis password (kept for compatibility with local development)
# Not used when REDIS_URL is set to DragonflyDB Cloud
REDIS_PASSWORD=change_this_redis_password_in_production_minimum_32_chars

# =============================================================================
# MONITORING CREDENTIALS
# =============================================================================

# Grafana admin user credentials
# Change these passwords for production security
GRAFANA_ADMIN_USER=admin
GRAFANA_ADMIN_PASSWORD=change_this_grafana_password_minimum_32_chars

# pgAdmin database management interface credentials
PGADMIN_EMAIL=admin@trading-bot.local
PGADMIN_PASSWORD=change_this_pgadmin_password_minimum_32_chars

# =============================================================================
# SERVICE PORTS (External Access)
# =============================================================================
# These ports are mapped from host to container in docker-compose.yml
# Modify if you have port conflicts on your host system

# Database ports
TIMESCALEDB_PORT=5432          # TimescaleDB PostgreSQL port
# DragonflyDB Cloud uses remote connection (no local port needed)

# Monitoring ports
PROMETHEUS_PORT=9090           # Prometheus metrics collection
GRAFANA_PORT=3000              # Grafana dashboards
ALERTMANAGER_PORT=9093         # AlertManager routing

# Trading bot ports
TRADING_BOT_METRICS_PORT=9091  # Trading bot metrics (exposed as 9091 to avoid Prometheus conflict)
TRADING_BOT_HEALTH_PORT=8082   # Trading bot health check endpoint
TRADING_BOT_API_PORT=8080      # Trading bot API (reserved, not exposed in compose)

# Data consumer and management ports
DATA_CONSUMER_PORT=9191        # Rust data consumer metrics and health
PGADMIN_PORT=8081              # pgAdmin web interface

# System monitoring ports
NODE_EXPORTER_PORT=9100        # Node exporter system metrics
CADVISOR_PORT=8083             # Container advisor metrics

# =============================================================================
# ALERT CONFIGURATION
# =============================================================================

# AlertManager webhook tokens and URLs
# These are optional - only needed if you want alerting

# Telegram bot alerts
TELEGRAM_WEBHOOK_TOKEN=your_telegram_webhook_token_if_using_alerts
TELEGRAM_CHAT_ID=your_telegram_chat_id

# Slack workspace alerts
SLACK_WEBHOOK_URL=your_slack_webhook_url_if_using_alerts

# Email alerts configuration
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
ALERT_EMAIL=alerts@yourdomain.com

# =============================================================================
# GEYSER DATA CONSUMER CONFIGURATION
# =============================================================================

# Solana Geyser endpoint for real-time data streaming
# Use QuickNode, Helius, or other Geyser-compatible endpoint
GEYSER_ENDPOINT=https://api.mainnet-beta.solana.com:443

# Geyser authentication token (if required by your provider)
GEYSER_TOKEN=your_geyser_token_if_required

# =============================================================================
# DOCKER COMPOSE OVERRIDES
# =============================================================================

# Network configuration
# By default, Docker Compose creates a custom bridge network
# You can override network settings here if needed

COMPOSE_PROJECT_NAME=trading-bot
COMPOSE_FILE=docker-compose.yml

# Logging configuration
# Controls how container logs are managed
LOGGING_DRIVER=json-file
LOGGING_MAX_SIZE=10m
LOGGING_MAX_FILE=3

# Resource limits (optional)
# Uncomment and adjust to limit container resource usage
# MEMORY_LIMIT=2g
# CPU_LIMIT=2.0

# =============================================================================
# DEVELOPMENT SETTINGS
# =============================================================================

# Enable development mode features
# Set to false for production deployments
DEV_MODE=false
MOCK_APIS=false
VERBOSE_LOGGING=false

# Source code mounting (development only)
# When BUILD_TARGET=development, source code is mounted from host
MOUNT_SOURCE_CODE=true

# Hot reload configuration (development only)
ENABLE_HOT_RELOAD=false

# =============================================================================
# BACKUP CONFIGURATION
# =============================================================================

# Automated backup settings for TimescaleDB
BACKUP_ENABLED=true
BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
BACKUP_RETENTION_DAYS=30
BACKUP_LOCATION=/backups

# =============================================================================
# PERFORMANCE TUNING
# =============================================================================

# TimescaleDB performance settings
TIMESCALEDB_SHARED_BUFFERS=256MB
TIMESCALEDB_EFFECTIVE_CACHE_SIZE=1GB
TIMESCALEDB_MAINTENANCE_WORK_MEM=64MB

# DragonflyDB performance settings
DRAGONFLYDB_MAXMEMORY=512mb
DRAGONFLYDB_EVICTION_POLICY=allkeys-lru

# Application performance settings
RUST_LOG=info
RUST_BACKTRACE=1
LOG_LEVEL=INFO

# =============================================================================
# SECURITY SETTINGS
# =============================================================================

# TLS/SSL configuration
# Enable SSL for database connections (recommended for production)
TLS_ENABLED=true
TLS_VERIFY_MODE=required

# Authentication settings
# Session timeout for web interfaces
SESSION_TIMEOUT_MINUTES=30

# Rate limiting
API_RATE_LIMIT=100  # requests per minute
WEBHOOK_RATE_LIMIT=10  # requests per minute

# =============================================================================
# INTEGRATION SETTINGS
# =============================================================================

# External service integrations
# These settings control how the bot interacts with external services

# Solana network settings
SOLANA_NETWORK=mainnet-beta
SOLANA_COMMITMENT=confirmed

# RPC provider settings
RPC_TIMEOUT_SECONDS=30
RPC_RETRY_ATTEMPTS=3
RPC_RETRY_DELAY_SECONDS=1

# Data provider settings
DATA_PROVIDER=helius
DATA_REFRESH_INTERVAL_SECONDS=10

# =============================================================================
# TESTING CONFIGURATION
# =============================================================================

# Testing mode settings
# These override production settings when BUILD_TARGET=test
TEST_MODE=false
TEST_WALLET_ENABLED=false
DRY_RUN_MODE=false

# Mock data settings
MOCK_DATA_ENABLED=false
MOCK_TRADES_ENABLED=false

# =============================================================================
# DOCUMENTATION AND SUPPORT
# =============================================================================

# Version information
DOCKER_COMPOSE_VERSION=3.8
CONFIG_VERSION=1.0

# Support URLs
DOCUMENTATION_URL=https://docs.trading-bot.com
SUPPORT_EMAIL=support@trading-bot.com
ISSUES_URL=https://github.com/trading-bot/issues

# =============================================================================
# DEPLOYMENT NOTES
# =============================================================================

# Deployment Instructions:
# 1. Ensure DragonflyDB Cloud is configured and REDIS_URL is set correctly
# 2. Update all CHANGE_THIS passwords with secure random values
# 3. Set proper file permissions: chmod 600 .env.docker
# 4. Test configuration: docker-compose config
# 5. Deploy services: docker-compose up -d
# 6. Verify health: docker-compose ps && docker-compose logs
#
# Port Summary (Host -> Container):
# - 5432 -> TimescaleDB (PostgreSQL)
# - 3000 -> Grafana dashboards
# - 9090 -> Prometheus metrics
# - 9091 -> Trading bot metrics
# - 8082 -> Trading bot health
# - 9191 -> Data consumer metrics
# - 8081 -> pgAdmin interface
# - 9100 -> Node exporter
# - 8083 -> cAdvisor
# - 9093 -> AlertManager
#
# For detailed deployment guide, see: DOCKER_DEPLOYMENT_GUIDE.md
#
# ‚ö†Ô∏è CRITICAL SECURITY REMINDERS:
#    - NEVER commit .env.docker to version control
#    - ALWAYS use strong, unique passwords
#    - SECURE your DragonflyDB Cloud connection
#    - MONITOR logs for security events
#    - ROTATE credentials regularly