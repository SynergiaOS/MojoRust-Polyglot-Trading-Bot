#!/bin/bash

# Infisical Setup Script for MojoRust Trading Bot
# This script helps configure Infisical secrets management

set -e

echo "🔐 Infisical Setup for MojoRust Trading Bot"
echo "=========================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

# Check if .env file exists
ENV_FILE=".env"
if [ -f "$ENV_FILE" ]; then
    print_warning ".env file already exists. Creating backup..."
    cp "$ENV_FILE" "${ENV_FILE}.backup.$(date +%Y%m%d_%H%M%S)"
fi

print_info "Please provide your Infisical configuration:"
echo ""

# Get Infisical configuration
read -p "🔑 Infisical Client ID: " INFISICAL_CLIENT_ID
read -p "🔑 Infisical Client Secret: " INFISICAL_CLIENT_SECRET
read -p "🆔 Infisical Project ID: " INFISICAL_PROJECT_ID
read -p "🌍 Environment (dev/staging/production) [dev]: " INFISICAL_ENVIRONMENT

# Set defaults
INFISICAL_ENVIRONMENT=${INFISICAL_ENVIRONMENT:-dev}
INFISICAL_BASE_URL="https://app.infisical.com"
INFISICAL_CACHE_TTL_SECONDS="300"

echo ""
print_status "Creating .env file with Infisical configuration..."

# Create .env file
cat > "$ENV_FILE" << EOF
# =============================================================================
# Infisical Secrets Management Configuration
# =============================================================================
# Generated by setup_infisical.sh on $(date)

INFISICAL_CLIENT_ID=${INFISICAL_CLIENT_ID}
INFISICAL_CLIENT_SECRET=${INFISICAL_CLIENT_SECRET}
INFISICAL_PROJECT_ID=${INFISICAL_PROJECT_ID}
INFISICAL_ENVIRONMENT=${INFISICAL_ENVIRONMENT}
INFISICAL_BASE_URL=${INFISICAL_BASE_URL}
INFISICAL_CACHE_TTL_SECONDS=${INFISICAL_CACHE_TTL_SECONDS}

# =============================================================================
# Trading Bot Core Configuration
# =============================================================================
TRADING_ENV=${INFISICAL_ENVIRONMENT}
EXECUTION_MODE=paper
ENABLE_RUST_CONSUMER=true

# =============================================================================
# Additional Secrets (to be configured in Infisical)
# =============================================================================
# Add these secrets to your Infisical project:
# - HELIUS_API_KEY
# - QUICKNODE_PRIMARY_RPC
# - WALLET_ADDRESS
# - WALLET_PRIVATE_KEY_PATH
# - And other API keys as needed

EOF

print_status "✅ .env file created successfully!"

echo ""
print_info "Next steps:"
echo "1. Add your secrets to Infisical: https://app.infisical.com/projects/${INFISICAL_PROJECT_ID}"
echo "2. Recommended secrets to add:"
echo ""

cat << 'EOF'
Required Secrets:
- HELIUS_API_KEY
- QUICKNODE_PRIMARY_RPC
- WALLET_ADDRESS
- WALLET_PRIVATE_KEY_PATH

Optional but Recommended:
- HELIUS_RPC_URL
- DEXSCREENER_BASE_URL
- JUPITER_BASE_URL
- TWITTER_API_KEY
- HONEYPOT_API_KEY
- DATABASE_URL
- REDIS_URL

EOF

echo ""
print_info "Testing Infisical connection..."

# Test the Rust implementation
if command -v cargo &> /dev/null; then
    cd rust-modules
    print_status "Testing Infisical Rust implementation..."

    # Create a simple test
    cat > test_infisical.rs << 'EOF'
use anyhow::Result;
use std::env;

#[tokio::main]
async fn main() -> Result<()> {
    // Load environment variables
    dotenvy::dotenv().ok();

    // Test Infisical configuration
    if let Ok(client_id) = env::var("INFISICAL_CLIENT_ID") {
        println!("✅ INFISICAL_CLIENT_ID: {}", &client_id[..8]);
        println!("✅ Configuration loaded successfully");

        // You can add actual Infisical connection test here
        // let config = infisical_manager::InfisicalConfig::from_env()?;
        // let secrets_manager = infisical_manager::SecretsManager::new().await?;
        // println!("✅ Infisical connection test successful");
    } else {
        println!("❌ INFISICAL_CLIENT_ID not found");
    }

    Ok(())
}
EOF

    # Add the infisical dependency if not present
    if ! grep -q "infisical" Cargo.toml; then
        print_warning "Adding infisical dependency to Cargo.toml..."
        cat >> Cargo.toml << 'EOF'

[dependencies.infisical]
infisical = "0.4"
dotenvy = "0.15"
tokio = { version = "1.0", features = ["full"] }
EOF
    fi

    print_status "Compiling test..."
    if cargo run --bin test_infisical 2>/dev/null; then
        print_status "✅ Infisical test passed!"
    else
        print_warning "⚠️  Infisical test failed - this is expected if dependencies are not installed"
    fi

    # Clean up test file
    rm -f test_infisical.rs
    cd ..

else
    print_warning "Cargo not found - skipping Rust implementation test"
fi

echo ""
print_status "🎉 Infisical setup complete!"
echo ""
print_info "Important security notes:"
echo "1. Never commit your actual .env file to version control"
echo "2. Store your secrets securely in Infisical"
echo "3. Use different environments (dev/staging/production) for isolation"
echo "4. Regularly rotate your API keys and secrets"
echo ""

# Verify file permissions
chmod 600 "$ENV_FILE"
print_status "🔒 File permissions set to 600 (owner read/write only)"

echo ""
print_info "Your .env file is ready. You can now:"
echo "1. Add secrets to your Infisical project"
echo "2. Run the trading bot: cargo run"
echo "3. Test with: make test"
echo ""

# Optional: Test with Python if available
if command -v python3 &> /dev/null; then
    print_info "Testing Python environment variable loading..."
    python3 << EOF
import os
from dotenv import load_dotenv

load_dotenv()
client_id = os.getenv('INFISICAL_CLIENT_ID')
if client_id:
    print(f"✅ Python environment loaded: INFISICAL_CLIENT_ID={client_id[:8]}...")
else:
    print("❌ Failed to load environment variables in Python")
EOF
fi

echo ""
print_status "Setup complete! 🚀"