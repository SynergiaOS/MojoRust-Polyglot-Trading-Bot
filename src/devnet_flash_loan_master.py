#!/usr/bin/env python3
"""
üéØ DEVNET FLASH LOAN MASTER - ZERO RYZYKA, PE≈ÅNA NAUKA
Expert Mojo/Rust/Python Trading System na Devnet
Testuj strategie bez ryzyka utraty kapita≈Çu!
"""

import asyncio
import aiohttp
import json
import time
import base64
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from datetime import datetime, timedelta
import logging
import os

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

@dataclass
class DevnetFlashOpportunity:
    """Klasa dla okazji flash loan na devnet"""
    dex_a: str
    dex_b: str
    token_mint: str
    spread_bps: float
    estimated_profit: float
    confidence: float
    liquidity_a: float
    liquidity_b: float
    execution_time_ms: int

class DevnetFlashLoanMaster:
    """Master silnik flash loan na devnet - nauka i optymalizacja"""

    def __init__(self):
        self.network = "devnet"
        self.wallet_address = "GedVmbHnUpRoqxWSxLwDMQNY5bmggTjRojoCY6u31VGS"

        # Devnet API endpoints
        self.devnet_rpc = "https://api.devnet.solana.com"
        self.helius_devnet = "https://rpc.devnet.helius.xyz/?api-key=helius-dev-k8k2j3j4k5n6m7p8q9r0s1t2u3v4w5x6y7z8"
        self.jupiter_quote = "https://quote-api.jup.ag/v6/quote"  # Jupiter dzia≈Ça z devnet tokenami

        # PoczƒÖtkowe ≈õrodki na devnet (mo≈ºemy prosiƒá o wiƒôcej)
        self.devnet_balance = 1.0  # Startujemy z 1 SOL na devnet

        # Flash loan parametry na devnet
        self.max_flash_loan = 100.0  # 100 SOL na devnet
        self.min_profit_threshold = 0.01  # 0.01 SOL min zysk
        self.max_gas_cost = 0.001  # Taniej na devnet

        # Devnet tokeny (≈Çatwo dostƒôpne)
        self.devnet_tokens = [
            "So11111111111111111111111111111111111111112",  # wSOL
            "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",  # USDC
            "Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB",  # USDT
            "mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So",  # stSOL
        ]

        # Statystyki nauki
        self.learning_stats = {
            "opportunities_analyzed": 0,
            "successful_simulations": 0,
            "total_simulated_profit": 0.0,
            "best_profit": 0.0,
            "average_spread": 0.0,
            "dex_performance": {}
        }

        # DEX monitoring
        self.monitored_dexes = ["raydium", "orca", "jupiter", "serum", "saber"]

    async def get_devnet_balance(self) -> float:
        """Sprawd≈∫ saldo na devnet"""
        try:
            async with aiohttp.ClientSession() as session:
                payload = {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "getBalance",
                    "params": [self.wallet_address]
                }

                async with session.post(self.devnet_rpc, json=payload, timeout=5) as response:
                    if response.status == 200:
                        data = await response.json()
                        if "result" in data:
                            balance = data["result"]["value"] / 1000000000
                            logger.info(f"üí∞ Saldo Devnet: {balance:.4f} SOL")
                            return balance
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd sprawdzania salda devnet: {e}")

        return self.devnet_balance

    async def request_devnet_sol(self) -> bool:
        "Popro≈õ o darmowe SOL na devnet faucet"""
        try:
            async with aiohttp.ClientSession() as session:
                faucet_url = "https://api.devnet.solana.com"
                payload = {
                    "jsonrpc": "2.0",
                    "id": 1,
                    "method": "requestAirdrop",
                    "params": [self.wallet_address, 1000000000]  # 1 SOL
                }

                async with session.post(faucet_url, json=payload, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        if "result" in data:
                            logger.info("‚úÖ Otrzymano 1 SOL z devnet faucet!")
                            await asyncio.sleep(5)  # Czekaj na potwierdzenie
                            return True
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd requestowania SOL: {e}")

        return False

    async def get_devnet_token_prices(self, token_mint: str, amount: float = 50.0) -> Dict[str, float]:
        """Pobierz ceny token√≥w na devnet"""

        prices = {}

        async with aiohttp.ClientSession() as session:
            for dex in self.monitored_dexes:
                try:
                    # Jupiter quote request
                    quote_payload = {
                        "inputMint": "So11111111111111111111111111111111111111112",  # SOL
                        "outputMint": token_mint,
                        "amount": int(amount * 1e9),
                        "slippageBps": 100,
                        "onlyDirectRoutes": True,
                        "asLegacyTransaction": False
                    }

                    async with session.post(self.jupiter_quote, json=quote_payload, timeout=5) as response:
                        if response.status == 200:
                            data = await response.json()
                            if "outAmount" in data and data["outAmount"] > 0:
                                price = amount / (data["outAmount"] / 1e9)
                                prices[dex] = price
                                logger.info(f"üí∞ {dex.upper()}: {price:.6f} SOL/token")

                except Exception as e:
                    logger.debug(f"‚ö†Ô∏è  B≈ÇƒÖd ceny z {dex}: {e}")

        return prices

    async def analyze_arbitrage_opportunities(self) -> List[DevnetFlashOpportunity]:
        """Analizuj okazje arbitra≈ºowe na devnet"""

        logger.info("üîç Analiza okazji arbitra≈ºowych na Devnet...")
        opportunities = []

        for token_mint in self.devnet_tokens:
            try:
                # Get prices across DEXes
                prices = await self.get_devnet_token_prices(token_mint)

                if len(prices) < 2:
                    continue

                # Find arbitrage opportunities
                for dex_a, price_a in prices.items():
                    for dex_b, price_b in prices.items():
                        if dex_a == dex_b:
                            continue

                        # Calculate spread
                        if price_a > 0 and price_b > 0:
                            spread = abs(price_b - price_a) / min(price_a, price_b)
                            spread_bps = spread * 10000

                            if spread_bps > 25:  # Min 0.25% spread
                                # Calculate potential profit
                                flash_amount = min(20.0, self.max_flash_loan)
                                gross_profit = (spread_bps / 10000) * flash_amount

                                # Subtract costs (lower on devnet)
                                flash_fee = flash_amount * 0.0001  # 0.01% on devnet
                                gas_cost = self.max_gas_cost
                                net_profit = gross_profit - flash_fee - gas_cost

                                if net_profit > self.min_profit_threshold:
                                    opportunity = DevnetFlashOpportunity(
                                        dex_a=dex_a if price_a < price_b else dex_b,
                                        dex_b=dex_b if price_b > price_a else dex_a,
                                        token_mint=token_mint,
                                        spread_bps=spread_bps,
                                        estimated_profit=net_profit,
                                        confidence=0.85,
                                        liquidity_a=flash_amount,
                                        liquidity_b=flash_amount,
                                        execution_time_ms=2000 + int(spread_bps * 10)
                                    )
                                    opportunities.append(opportunity)

                                    logger.info(f"üéØ Arbitra≈º: {opportunity.dex_a} ‚Üí {opportunity.dex_b}")
                                    logger.info(f"   üí∞ Spread: {spread_bps:.1f}bps ‚Üí Zysk: {net_profit:.4f} SOL")

                self.learning_stats["opportunities_analyzed"] += len(opportunities)

            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd analizy tokena {token_mint}: {e}")

        # Sort by profit
        opportunities.sort(key=lambda x: x.estimated_profit, reverse=True)
        return opportunities[:5]  # Top 5 opportunities

    async def simulate_flash_loan_execution(self, opportunity: DevnetFlashOpportunity) -> Dict:
        """Symuluj wykonanie flash loan na devnet"""

        logger.info(f"‚ö° Symulacja Flash Loan na Devnet:")
        logger.info(f"   üîÑ {opportunity.dex_a} ‚Üí {opportunity.dex_b}")
        logger.info(f"   üí∞ Potencjalny zysk: {opportunity.estimated_profit:.4f} SOL")

        # Detailed execution plan
        flash_amount = 10.0  # Conservative 10 SOL

        execution_steps = {
            "step1_borrow": {
                "action": "Flash Loan Borrow",
                "amount": flash_amount,
                "provider": "solend_devnet",
                "fee_rate": 0.0001,
                "fee_cost": flash_amount * 0.0001
            },
            "step2_swap_a": {
                "action": f"Buy on {opportunity.dex_a}",
                "amount": flash_amount * 0.99,
                "expected_slippage": 0.002
            },
            "step3_swap_b": {
                "action": f"Sell on {opportunity.dex_b}",
                "expected_return": flash_amount * (1 + opportunity.spread_bps / 10000),
                "actual_return": flash_amount * (1 + opportunity.spread_bps / 10000 * 0.95)  # Realistic
            },
            "step4_repay": {
                "action": "Repay Flash Loan",
                "principal": flash_amount,
                "fee": flash_amount * 0.0001,
                "total_repayment": flash_amount * 1.0001
            }
        }

        # Calculate realistic profit
        gross_return = execution_steps["step3_swap_b"]["actual_return"]
        total_costs = (execution_steps["step4_repay"]["total_repayment"] +
                      execution_steps["step1_borrow"]["fee_cost"] +
                      self.max_gas_cost)

        realistic_profit = gross_return - total_costs

        # Success probability based on spread size
        success_probability = min(0.95, 0.7 + (opportunity.spread_bps / 1000))

        result = {
            "success": realistic_profit > 0,
            "realistic_profit": realistic_profit,
            "success_probability": success_probability,
            "execution_plan": execution_steps,
            "risk_assessment": "LOW" if opportunity.spread_bps > 50 else "MEDIUM",
            "estimated_time": opportunity.execution_time_ms,
            "roi_percentage": (realistic_profit / flash_amount) * 100
        }

        # Update learning stats
        if result["success"]:
            self.learning_stats["successful_simulations"] += 1
            self.learning_stats["total_simulated_profit"] += realistic_profit
            self.learning_stats["best_profit"] = max(self.learning_stats["best_profit"], realistic_profit)

        logger.info(f"üìä Wynik symulacji:")
        logger.info(f"   ‚úÖ Sukces: {'TAK' if result['success'] else 'NIE'}")
        logger.info(f"   üí∞ Realistyczny zysk: {realistic_profit:.4f} SOL")
        logger.info(f"   üìà Prawdopodobie≈Ñstwo: {success_probability:.1%}")
        logger.info(f"   ‚è±Ô∏è  Czas wykonania: {opportunity.execution_time_ms}ms")

        return result

    async def run_learning_session(self, duration_minutes: int = 30):
        """Uruchom sesjƒô nauki na devnet"""

        logger.info("üéì SESJA NAUKI - DEVNET FLASH LOAN")
        logger.info("=" * 50)
        logger.info(f"‚è±Ô∏è  Czas trwania: {duration_minutes} minut")
        logger.info(f"üåê Sieƒá: Devnet (zero ryzyka)")
        logger.info(f"üí∞ Saldo: {self.devnet_balance:.4f} SOL")

        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)

        session_results = {
            "cycles_completed": 0,
            "opportunities_found": 0,
            "simulations_run": 0,
            "successful_simulations": 0,
            "total_profit_potential": 0.0,
            "best_single_opportunity": None,
            "dex_performance": {}
        }

        while time.time() < end_time:
            try:
                logger.info(f"\nüîÑ Cykl {session_results['cycles_completed'] + 1}")

                # Step 1: Find opportunities
                opportunities = await self.analyze_arbitrage_opportunities()
                session_results["opportunities_found"] += len(opportunities)

                if opportunities:
                    # Step 2: Simulate best opportunities
                    for i, opp in enumerate(opportunities[:3]):  # Top 3
                        logger.info(f"\nüéØ Symulacja {i+1}/3:")
                        sim_result = await self.simulate_flash_loan_execution(opp)
                        session_results["simulations_run"] += 1

                        if sim_result["success"]:
                            session_results["successful_simulations"] += 1
                            session_results["total_profit_potential"] += sim_result["realistic_profit"]

                            if (session_results["best_single_opportunity"] is None or
                                sim_result["realistic_profit"] > session_results["best_single_opportunity"]["realistic_profit"]):
                                session_results["best_single_opportunity"] = sim_result

                        # Track DEX performance
                        for dex in [opp.dex_a, opp.dex_b]:
                            if dex not in session_results["dex_performance"]:
                                session_results["dex_performance"][dex] = {"count": 0, "profit": 0.0}
                            session_results["dex_performance"][dex]["count"] += 1
                            if sim_result["success"]:
                                session_results["dex_performance"][dex]["profit"] += sim_result["realistic_profit"]

                session_results["cycles_completed"] += 1

                # Wait between cycles
                wait_time = 60 if opportunities else 30
                logger.info(f"üí§ Czekam {wait_time} sekund...")
                await asyncio.sleep(wait_time)

            except KeyboardInterrupt:
                logger.info("üõë Przerwano przez u≈ºytkownika")
                break
            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd w cyklu: {e}")
                await asyncio.sleep(30)

        # Generate learning report
        await self.generate_learning_report(session_results, duration_minutes)

        return session_results

    async def generate_learning_report(self, results: Dict, duration_minutes: int):
        """Wygeneruj raport nauki"""

        logger.info("\n" + "="*60)
        logger.info("üìä RAPORT NAUKI - DEVNET FLASH LOAN")
        logger.info("="*60)

        success_rate = (results["successful_simulations"] / results["simulations_run"] * 100) if results["simulations_run"] > 0 else 0

        logger.info(f"‚è±Ô∏è  Czas sesji: {duration_minutes} minut")
        logger.info(f"üîÑ Uko≈Ñczonych cykli: {results['cycles_completed']}")
        logger.info(f"üéØ Znaleziono okazji: {results['opportunities_found']}")
        logger.info(f"üß™ Symulacji: {results['simulations_run']}")
        logger.info(f"‚úÖ Sukcesy: {results['successful_simulations']} ({success_rate:.1f}%)")
        logger.info(f"üí∞ Potencjalny zysk: {results['total_profit_potential']:.4f} SOL")

        if results["best_single_opportunity"]:
            best = results["best_single_opportunity"]
            logger.info(f"üèÜ Najlepsza okazja: {best['realistic_profit']:.4f} SOL ({best['roi_percentage']:.2f}% ROI)")

        # DEX Performance
        logger.info("\nüìà WYDAJNO≈öƒÜ DEX:")
        for dex, perf in results["dex_performance"].items():
            avg_profit = perf["profit"] / perf["count"] if perf["count"] > 0 else 0
            logger.info(f"   {dex.upper()}: {perf['count']} okazji, avg {avg_profit:.4f} SOL")

        # Learning insights
        logger.info("\nüí° WNIOSKI Z NAUKI:")
        if success_rate > 70:
            logger.info("   ‚úÖ Wysoka skuteczno≈õƒá - strategia dzia≈ÇajƒÖca!")
        elif success_rate > 40:
            logger.info("   ‚ö†Ô∏è  ≈örednia skuteczno≈õƒá - potrzeba optymalizacji")
        else:
            logger.info("   ‚ùå Niska skuteczno≈õƒá - zmie≈Ñ strategiƒô")

        if results["total_profit_potential"] > 0.1:
            logger.info("   üí∞ Wysoki potencja≈Ç zyskowy - gotowy na mainnet!")
        elif results["total_profit_potential"] > 0.05:
            logger.info("   üìà Umiarkowany potencja≈Ç - kontynuuj naukƒô")
        else:
            logger.info("   üìâ Niski potencja≈Ç - szukaj lepszych okazji")

        # Recommendations
        logger.info("\nüéØ REKOMENDACJE:")
        if results["total_profit_potential"] > 0.05:
            logger.info("   üí° Gotowy na mainnet z minimum 1 SOL kapita≈Çu")
            logger.info("   üí° Skup siƒô na najlepszych DEXach z raportu")
        else:
            logger.info("   üìö Kontynuuj naukƒô na devnet")
            logger.info("   üîß Optymalizuj parametry wej≈õcia/wyj≈õcia")

        logger.info("   üö™ Przejd≈∫ na mainnet tylko po osiƒÖgniƒôciu >70% sukces√≥w")
        logger.info("   üí∞ ZdobƒÖd≈∫ minimum 1 SOL przed realnym tradingiem")

async def main():
    """G≈Ç√≥wna funkcja - Expert Devnet Learning System"""
    print("üéì DEVNET FLASH LOAN MASTER - EXPERT LEARNING SYSTEM")
    print("=" * 60)
    print("üéØ Cel: Nauka flash loan arbitrage bez ryzyka")
    print("üåê Sieƒá: Solana Devnet")
    print("üí∞ Kapita≈Ç: Darmowy SOL z faucet")
    print("üìö Metodologia: Symulacje i analiza")
    print()

    master = DevnetFlashLoanMaster()

    # Sprawd≈∫ saldo i popro≈õ o SOL je≈õli potrzebne
    balance = await master.get_devnet_balance()
    if balance < 0.5:
        logger.info("üí∞ Proszƒô o dodatkowe SOL z faucet...")
        await master.request_devnet_sol()
        balance = await master.get_devnet_balance()

    # Uruchom sesjƒô nauki
    logger.info("üöÄ URUCHAMIAM SESJƒò NAUKI...")

    try:
        # 30 minut nauki
        results = await master.run_learning_session(duration_minutes=30)

        logger.info("\nüéâ SESJA NAUKI ZAKO≈ÉCZONA!")
        logger.info("üí° Analizuj wyniki i podejmuj decyzje o mainnet")

    except KeyboardInterrupt:
        logger.info("\nüõë Sesja przerwana przez u≈ºytkownika")
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd krytyczny: {e}")

    logger.info("üèÅ Zako≈Ñczono system Devnet Flash Loan Master")

if __name__ == "__main__":
    asyncio.run(main())