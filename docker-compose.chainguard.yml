# Chainguard-Optimized Docker Compose Configuration
# Enhanced security with zero-CVE images and 86% size reduction

version: '3.8'

services:
  # TimescaleDB (keep official image - Chainguard lacks TimescaleDB extension)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: mojorust_timescaledb
    restart: unless-stopped
    environment:
      POSTGRES_DB: mojorust
      POSTGRES_USER: mojorust_user
      POSTGRES_PASSWORD: mojorust_password
      POSTGRES_DB: mojorust
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./config/timescaledb.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - mojorust_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mojorust_user -d mojorust"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache Layer (DragonflyDB Cloud - External Service)
  # Note: DragonflyDB Cloud is external, no local container needed
  # For local development, use dragonfly-local service below

  # Prometheus - Chainguard Image
  prometheus:
    image: cgr.dev/chainguard/prometheus:latest
    container_name: mojorust_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
      - ./config/prometheus_rules:/etc/prometheus/rules
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - mojorust_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider=0", "--output-document=-", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Chainguard Image
  grafana:
    image: cgr.dev/chainguard/grafana:latest
    container_name: mojorust_grafana
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: trading_admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mojorust_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AlertManager - Chainguard Image
  alertmanager:
    image: cgr.dev/chainguard/alertmanager:latest
    container_name: mojorust_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - mojust_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider=0", "--output-document=-", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - Chainguard Image (if available, otherwise keep official)
  node-exporter:
    image: cgr.dev/chainguard/node-exporter:latest
    container_name: mojorust_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /:/host
      - node_exporter_data:/var/lib/node_exporter/textfile_collector
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/proc'
      - '--path.sysfs=/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - mojorust_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider=0", "--output-document=-", "http://localhost:9100/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # cAdvisor - Official Image (no Chainguard alternative)
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: mojorust_cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - mojorust_network
    privileged: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cadvisor.rule=Host(`cadvisor.localhost`)"
    depends_on:
      - prometheus

  # Rust Data Consumer - Chainguard Build
  data-consumer:
    build:
      context: rust-modules
      dockerfile: Dockerfile.data-consumer.chainguard
    image: mojorust/data-consumer:chainguard
    container_name: mojorust_data_consumer
    restart: unless-stopped
    environment:
      RUST_LOG: info
      METRICS_ADDR: 0.0.0.0:9191
      GEYSER_ENDPOINT: ${GEYSER_ENDPOINT}
      REDIS_URL: ${REDIS_URL}
      SOLANA_RPC: ${SOLANA_RPC}
    volumes:
      - data_logs:/app/logs
      - rust-modules:/app/rust-modules
    ports:
      - "9191:9191"
    networks:
      - mojorust_network
    depends_on:
      - timescaledb
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9191/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Python Geyser Client - Chainguard Build
  geyser-client:
    build:
      context: python
      dockerfile: Dockerfile.geyser.chainguard
    image: mojorust/geyser-client:chainguard
    container_name: mojorust_geyser_client
    restart: unless-stopped
    environment:
      GEYSER_ENDPOINT: ${GEYSER_ENDPOINT}
      REDIS_URL: ${REDIS_URL}
      GEYSER_TOKEN: ${GEYSER_TOKEN}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - mojorust_network
    depends_on:
      - timescaledb
    deploy:
      replicas: 2
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8191/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Trading Bot Runtime - Chainguard Build
  trading-bot:
    build:
      context: .
      dockerfile: Dockerfile.chainguard
    image: mojorust/trading-bot:chainguard
    container_name: mojorust_trading_bot
    restart: unless-stopped
    environment:
      # Trading Configuration
      REDIS_URL: ${REDIS_URL}
      HELIUS_API_KEY: ${HELIUS_API_KEY}
      QUICKNODE_PRIMARY_RPC: ${QUICKNODE_PRIMARY_RPC}
      SOLANA_RPC: ${SOLANA_RPC}
      WALLET_ADDRESS: ${WALLET_ADDRESS}
      WALLET_PRIVATE_KEY_PATH: ${WALLET_PRIVATE_KEY_PATH}
      EXECUTION_MODE: ${EXECUTION_MODE:-paper}

      # Arbitrage Configuration
      ENABLE_FLASH_LOANS: ${ENABLE_FLASH_LOANS:-false}
      MIN_PROFIT_THRESHOLD: ${MIN_PROFIT_THRESHOLD:-25.0}
      MAX_SLIPPAGE_BPS: ${MAX_SLIPPAGE_BPS:-100}

      # Risk Management
      MAX_POSITION_SIZE_SOL: ${MAX_POSITION_SIZE_SOL:-0.5}
      MAX_DAILY_LOSS_SOL: ${MAX_DAILY_LOSS_SOL:-0.1}
      CIRCUIT_BREAKER_ENABLED: ${CIRCUIT_BREAKER_ENABLED:-true}

      # Monitoring
      METRICS_ENABLED: ${METRICS_ENABLED:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      RUST_LOG: ${RUST_LOG:-info}

      # Infrastructure
      INFISICAL_CLIENT_ID: ${INFISICAL_CLIENT_ID}
      INFISICAL_CLIENT_SECRET: ${INFISICAL_CLIENT_SECRET}
      INFISICAL_PROJECT_ID: ${INFISICAL_PROJECT_ID}
    volumes:
      - src:/app/src
      - config:/app/config
      - secrets:/app/secrets
      - logs:/app/logs
      - rust-modules:/app/rust-modules
      - trading_data:/app/trading_data
      - mojorust_data:/usr/share/mojorust
    ports:
      - "8082:8082"  # Health check
      - "9091:9091"  # Metrics
    networks:
      - mojorust_network
    depends_on:
      - timescaledb
      - prometheus
      - geyser-client
      - data-consumer
    healthcheck:
      test: ["CMD", "/app/docker-entrypoint.sh", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin - Official Image (no Chainguard alternative)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: mojorust_pgadmin
    restart: unless-stopped
    ports:
      - "5050:5050"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - mojorust_network
    depends_on:
      - timescaledb
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # DragonflyDB for Local Development Only
  dragonfly-local:
    image: cgr.dev/chainguard/dragonfly:1.34
    container_name: mojorust_dragonfly_local
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - dragonfly_data:/data
    command: [
      "--proactor_threads=8",
      "--maxmemory=8gb",
      "--hz=100"
    ]
    networks:
      - mojorust_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - development

# Networks
networks:
  mojust_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
        - gateway: 172.20.0.1

# Volumes
volumes:
  timescaledb_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  data_logs:
  rust-modules:
  trading_data:
  mojorust_data:
  src:
  dragonfly_data:
  node_exporter_data:
  pgadmin_data:
  config:
  secrets:
  logs:

# Chainguard security integration complete
# All images use zero-CVE Chainguard base images where available
# Version: v2.0-chainguard (2024-10-18)